{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.16.1",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "scrubbr!",
  "docComment": "",
  "name": "scrubbr",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "scrubbr!",
      "name": "",
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "scrubbr!GenericSerializer:type",
          "docComment": "/**\n * Serializer called for each node within the data object that is being serialized.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type GenericSerializer = "
            },
            {
              "kind": "Content",
              "text": "(data: any, state: "
            },
            {
              "kind": "Reference",
              "text": "ScrubbrState",
              "canonicalReference": "scrubbr!ScrubbrState:class"
            },
            {
              "kind": "Content",
              "text": ") => any | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "GenericSerializer",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "scrubbr!JSONSchemaDefinitions:type",
          "docComment": "/**\n * JSON Schema object that can be passed into Scrubbr. This needs to follow the format that `ts-json-schema-generator` uses: * All types are defined in the root `definitions` block. * All references (`$ref`) point to definitions within the JSON object. (i.e. no external references)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type JSONSchemaDefinitions = "
            },
            {
              "kind": "Reference",
              "text": "JSONSchema7",
              "canonicalReference": "@types/json-schema!JSONSchema7:interface"
            },
            {
              "kind": "Content",
              "text": " | {\n    definitions: {\n        [k: string]: "
            },
            {
              "kind": "Reference",
              "text": "JSONSchema7",
              "canonicalReference": "@types/json-schema!JSONSchema7:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "JSONSchemaDefinitions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "scrubbr!LogLevel:enum",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum LogLevel "
            }
          ],
          "releaseTag": "Public",
          "name": "LogLevel",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "scrubbr!LogLevel.DEBUG:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DEBUG = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "DEBUG",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "scrubbr!LogLevel.ERROR:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ERROR = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "ERROR",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "scrubbr!LogLevel.INFO:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "INFO = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "INFO",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "scrubbr!LogLevel.NONE:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "NONE = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "NONE",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "scrubbr!LogLevel.WARN:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WARN = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "WARN",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "scrubbr!Scrubbr:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class Scrubbr "
            }
          ],
          "releaseTag": "Public",
          "name": "Scrubbr",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "scrubbr!Scrubbr:constructor(1)",
              "docComment": "/**\n * Create new scrubbr serializer\n *\n * @param schema - The TypeScript schema file or JSON object to use for serialization.\n *\n * @param options - Scrubbr options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(schema: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaDefinitions",
                  "canonicalReference": "scrubbr!JSONSchemaDefinitions:type"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrOptions",
                  "canonicalReference": "scrubbr!ScrubbrOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "schema",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#addGenericSerializer:member(1)",
              "docComment": "/**\n * Add a generic custom serializer function that's called for each node in the object.\n *\n * @param serializer - The serializer function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addGenericSerializer(serializer: "
                },
                {
                  "kind": "Reference",
                  "text": "GenericSerializer",
                  "canonicalReference": "scrubbr!GenericSerializer:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "serializer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "addGenericSerializer"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#addTypeSerializer:member(1)",
              "docComment": "/**\n * Add a function to serialize a schema type\n *\n * @param typeName - One or more type names to register the serializer for.\n *\n * @param serializer - The serializer function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addTypeSerializer(typeName: "
                },
                {
                  "kind": "Content",
                  "text": "string | string[]"
                },
                {
                  "kind": "Content",
                  "text": ", serializer: "
                },
                {
                  "kind": "Reference",
                  "text": "TypeSerializer",
                  "canonicalReference": "scrubbr!TypeSerializer:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "typeName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "serializer",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "addTypeSerializer"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#clone:member(1)",
              "docComment": "/**\n * Create a duplicate version of this scrubbr with all the same serializers, global context, and options.\n *\n * This is useful to create a global scrubbr with serializer that should be used on all data, and all other scrubbrs are created from it for more specific use-cases.\n *\n * @example\n * ```typescript\n * // Global config\n * const scrubbr = new Scrubbr('./schema.ts');\n * scrubbr.addTypeSerializer('User', userSerializer);\n *\n * // API endpoint\n * function commentListApi() {\n *   const commentScrubbr = scrubbr.clone();\n *   commentScrubbr.addTypeSerializer('Comment', commentSerializer);\n *\n *   return scrubbr.serialize('CommentList', data);\n * }\n *\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clone(options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrOptions",
                  "canonicalReference": "scrubbr!ScrubbrOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Scrubbr",
                  "canonicalReference": "scrubbr!default:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#getGlobalContext:member(1)",
              "docComment": "/**\n * Retrieve the global context object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getGlobalContext(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getGlobalContext"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#getSchema:member(1)",
              "docComment": "/**\n * Return the entire generated schema for the loaded TypeScript file.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSchema(): "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema7",
                  "canonicalReference": "@types/json-schema!JSONSchema7:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSchema"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#getSchemaFor:member(1)",
              "docComment": "/**\n * Get the the generated JSON schema for a TypeScript type.\n *\n * @param typeName - The name of the type to return the schema for.\n *\n * @returns The JSON schema for the type, or null if it was not found.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSchemaFor(typeName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema7",
                  "canonicalReference": "@types/json-schema!JSONSchema7:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "typeName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getSchemaFor"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#loadSchema:member(1)",
              "docComment": "/**\n * Replace the schema with a new one\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "loadSchema(schema: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchemaDefinitions",
                  "canonicalReference": "scrubbr!JSONSchemaDefinitions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "schema",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "loadSchema"
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!Scrubbr#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrOptions",
                  "canonicalReference": "scrubbr!ScrubbrOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#serialize:member(1)",
              "docComment": "/**\n * Serialize data based on a TypeScript type.\n *\n * You can influence the return type by using the generic angle brackets:\n *\n * @param schemaType - The name of the typescript type to serialize the data with.\n *\n * @param data - The data to serialize\n *\n * @param context - Any data you want sent to the custom serializer functions.\n *\n * @param options - Set options for just this serialization.\n *\n * @example\n * ```\n *  scrubbr.serialize<UserList>('UserList', data);\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "serialize<Type = "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ">(schemaType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ", context?: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrOptions",
                  "canonicalReference": "scrubbr!ScrubbrOptions:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<Type>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "schemaType",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "Type",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "serialize"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!Scrubbr#setGlobalContext:member(1)",
              "docComment": "/**\n * Set the global context object, that will be automatically merged with the context passed to the serialize function. You can use this for setting things like the logged-in user, at a global level.\n *\n * @param context - Any object you want to set as the context.\n *\n * @param merge - Automatically merge this context with the existing global context (defaults false) Otherwise, the global context will be overwritten.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setGlobalContext(context: "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ", merge?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "merge",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setGlobalContext"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "scrubbr!ScrubbrOptions:type",
          "docComment": "/**\n * Options passed to the Scrubbr constructor\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ScrubbrOptions = "
            },
            {
              "kind": "Content",
              "text": "{\n    logLevel?: "
            },
            {
              "kind": "Reference",
              "text": "LogLevel",
              "canonicalReference": "scrubbr!LogLevel:enum"
            },
            {
              "kind": "Content",
              "text": ";\n    logNesting?: boolean | string;\n    logPrefix?: string;\n    throwOnError?: boolean;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ScrubbrOptions",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "scrubbr!ScrubbrState:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ScrubbrState "
            }
          ],
          "releaseTag": "Public",
          "name": "ScrubbrState",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "scrubbr!ScrubbrState:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `ScrubbrState` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", schema: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema7",
                  "canonicalReference": "@types/json-schema!JSONSchema7:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrOptions",
                  "canonicalReference": "scrubbr!ScrubbrOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ", context: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", path?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", nesting?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "schema",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "context",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  }
                },
                {
                  "parameterName": "nesting",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#context:member",
              "docComment": "/**\n * The context object passed to the serialize function.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "context: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "context",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!ScrubbrState#createListState:member(1)",
              "docComment": "/**\n * Create a child array index state, derived off of this state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createListState(data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", schema: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema7",
                  "canonicalReference": "@types/json-schema!JSONSchema7:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrState",
                  "canonicalReference": "scrubbr!ScrubbrState:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "schema",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "createListState"
            },
            {
              "kind": "Method",
              "canonicalReference": "scrubbr!ScrubbrState#createNodeState:member(1)",
              "docComment": "/**\n * Create a child property node state, derived off of this state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createNodeState(data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", schema: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema7",
                  "canonicalReference": "@types/json-schema!JSONSchema7:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrState",
                  "canonicalReference": "scrubbr!ScrubbrState:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "schema",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  }
                }
              ],
              "name": "createNodeState"
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#index:member",
              "docComment": "/**\n * If we're currently serializing an array, this is the array index\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "index: "
                },
                {
                  "kind": "Content",
                  "text": "number | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#logger:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logger: "
                },
                {
                  "kind": "Reference",
                  "text": "Logger",
                  "canonicalReference": "scrubbr!Logger:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#name:member",
              "docComment": "/**\n * The property name of the data being serialized.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#nesting:member",
              "docComment": "/**\n * The nesting level at this node of the data being serialized\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "nesting: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nesting",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#options:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "options: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrOptions",
                  "canonicalReference": "scrubbr!ScrubbrOptions:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "options",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#originalData:member",
              "docComment": "/**\n * Unserialized data at this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "originalData: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "originalData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#parent:member",
              "docComment": "/**\n * The state of the parent node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parent: "
                },
                {
                  "kind": "Reference",
                  "text": "ScrubbrState",
                  "canonicalReference": "scrubbr!ScrubbrState:class"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#path:member",
              "docComment": "/**\n * The current object path\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "path: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "path",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#rootSchemaType:member",
              "docComment": "/**\n * The schema type we're serializing the document with.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rootSchemaType: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rootSchemaType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#schemaDef:member",
              "docComment": "/**\n * JSON Schema object of the current data node type.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "schemaDef: "
                },
                {
                  "kind": "Reference",
                  "text": "JSONSchema7",
                  "canonicalReference": "@types/json-schema!JSONSchema7:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "schemaDef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#schemaType:member",
              "docComment": "/**\n * The schema type of the current data node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "schemaType: "
                },
                {
                  "kind": "Content",
                  "text": "string | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "schemaType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "scrubbr!ScrubbrState#seenTypes:member",
              "docComment": "/**\n * The schema types that have been used to serialize this node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "seenTypes: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "seenTypes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "scrubbr!TypeSerializer:type",
          "docComment": "/**\n * Serializer function called for a specific TypeScript type.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TypeSerializer = "
            },
            {
              "kind": "Content",
              "text": "(data: any, state: "
            },
            {
              "kind": "Reference",
              "text": "ScrubbrState",
              "canonicalReference": "scrubbr!ScrubbrState:class"
            },
            {
              "kind": "Content",
              "text": ") => any | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TypeSerializer",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "scrubbr!useType:function(1)",
          "docComment": "/**\n * Override the type that's being serialized. The return value from this function should be used by custom serializers.\n *\n * @example\n *\n * // Convert all `User` types to `RestrictedUser` scrubbr.typeSerializer('User', (data, state) => useType('RestrictedUser'));\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useType(typeName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "UseType",
              "canonicalReference": "scrubbr!UseType:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "typeName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "useType"
        }
      ]
    }
  ]
}
